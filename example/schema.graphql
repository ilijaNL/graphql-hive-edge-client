type Query {
  project(selector: ProjectSelectorInput!): Project
  projectsByType(type: ProjectType!): [Project!]!
  projects(filter: FilterInput): [Project!]!
}

type Mutation {
  deleteProject(selector: ProjectSelectorInput!): DeleteProjectPayload!
}

input ProjectSelectorInput {
  organization: ID!
  project: ID!
}

input FilterInput {
  type: ProjectType
  pagination: PaginationInput
  order: [ProjectOrderByInput!]
}

input PaginationInput {
  limit: Int
  offset: Int
}

input ProjectOrderByInput {
  field: String!
  direction: OrderDirection
}

enum OrderDirection {
  ASC
  DESC
}

type ProjectSelector {
  organization: ID!
  project: ID!
}

type DeleteProjectPayload {
  selector: ProjectSelector!
  deletedProject: Project!
}

type Project {
  id: ID!
  cleanId: ID!
  name: String!
  type: ProjectType!
  buildUrl: String
  validationUrl: String
}

enum ProjectType {
  FEDERATION
  STITCHING
  SINGLE
  CUSTOM
}
